DROP DATABASE teamfounder;
CREATE DATABASE teamfounder;

USE teamfounder;

CREATE TABLE IF NOT EXISTS users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    userId NVARCHAR(255) NOT NULL UNIQUE,
    username NVARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    privilege INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS skill (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    type VARCHAR(50),
    name VARCHAR(100) NOT NULL UNIQUE,
    status BOOLEAN DEFAULT TRUE,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS userSkill (
    userId BIGINT NOT NULL,
    skillId BIGINT NOT NULL,
    PRIMARY KEY (userId, skillId),
    FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (skillId) REFERENCES skill(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS course (
    courseCode VARCHAR(100) PRIMARY KEY ,
    name VARCHAR(255) NOT NULL,
    professorId VARCHAR(255) NOT NULL,
    academicYear TINYINT NOT NULL,
    semester TINYINT NOT NULL,
    description TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS announcement (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    importanceLevel TINYINT NOT NULL, -- 'TRIVIAL', 'MINOR', 'NORMAL', 'MAJOR', 'CRITICAL'
    courseCode VARCHAR(100) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (courseCode) REFERENCES course(courseCode) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS invitation (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    senderId BIGINT NOT NULL,
    receiverId BIGINT NOT NULL,
    courseCode VARCHAR(100) NOT NULL,
    message TEXT,
    status TINYINT DEFAULT 1 NOT NULL, -- 'PENDING', 'ACCEPTED', 'REJECTED'
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (senderId) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (receiverId) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (courseCode) REFERENCES course(courseCode) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS enrollment (
    userId NVARCHAR(20) NOT NULL,
    courseCode VARCHAR(10) NOT NULL,
    enrollment_date DATE NOT NULL,
    PRIMARY KEY (userId, courseCode),
    FOREIGN KEY (userId) REFERENCES users(userId),
    FOREIGN KEY (courseCode) REFERENCES course(courseCode)
);

